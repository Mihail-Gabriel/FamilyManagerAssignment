@page "/RemoveAdult"
@using Models
@using FileData
@inject AuthenticationStateProvider AuthenticationStateProvider
<AuthorizeView >
    <NotAuthorized>
        <h3>You require to be logged in and an adult to access this page</h3>
    </NotAuthorized>
</AuthorizeView>
<AuthorizeView Policy="MustBeAdult">
<h3>RemoveAdult</h3>
<button type="button" @onclick="HandleConfirmDelete">
    Delete Selected
</button>
@if (adults == null)
{
    <p>
        <em>No adults to display...</em>
    </p>
}
else
{
    <table class="table">
        <thead>
        <tr>
            <th>ID</th>
            <th>FirstName</th>
            <th>LastName</th>
            <th>HairColour</th>
            <th>EyeColour</th>
            <th>Age</th>
            <th>Weight</th>
            <th>Height</th>
            <th>Sex</th>
            <th>Job Title</th>
            <th>Salary</th>
        </tr>
        </thead>
        <tbody>
        @foreach (var adult in adults)
        {
            <tr @onclick="@(() => HandleDeleteList(adult))" style="cursor:pointer">
                <td>@adult.Id.ToString()</td>
                <td>@adult.FirstName</td>
                <td>@adult.LastName</td>
                <td>@adult.HairColor</td>
                <td>@adult.EyeColor</td>
                <td>@adult.Age.ToString()</td>
                <td>@adult.Weight.ToString()</td>
                <td>@adult.Height.ToString()</td>
                <td>@adult.Sex</td>
                <td>@adult.JobTitle.JobTitle</td>
                <td>@adult.JobTitle.Salary.ToString()</td>
            </tr>
        }
        </tbody>
    </table>

}
</AuthorizeView>
@code {
    private IList<Adult> adults;
    private IList<Adult> adultToDelete = new List<Adult>();
    private AdultFileContext fileContext = new AdultFileContext();

    protected override async Task OnInitializedAsync()
    {
        adults = fileContext.Adults;
    }

    private void HandleDeleteList(Adult adult)
    {
        Boolean flag = true;
        for(int i = 0 ; i<adultToDelete.Count;i++)
        {
            if (adult.Equals(adultToDelete[i]) )
            {
                adultToDelete.Remove(adult);
                flag = false;
            }
        }
        if(flag)
        {
            adultToDelete.Add(adult);
            Console.WriteLine(adult);}
        else
        {
            adultToDelete.Remove(adult);
            Console.WriteLine(adult);
        }
    }

    private void HandleConfirmDelete()
    {
        if (adultToDelete.Count <= 1 && adultToDelete != null)
        {
            fileContext.RemoveAdults(adultToDelete);
            adultToDelete.Clear();
            
        }

}

}