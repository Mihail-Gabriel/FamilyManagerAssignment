@page "/RemoveAdult"
@using Models
@using System.Net.Http.Json
@using FamilyManagerAssignment.Services
@using FamilyManagerAssignment.Services.Implementation
@inject AuthenticationStateProvider AuthenticationStateProvider
@inject NavigationManager NavigationManager

<AuthorizeView >
    <NotAuthorized>
        <h3>You require to be logged in and an adult to access this page</h3>
    </NotAuthorized>
</AuthorizeView>
<AuthorizeView Policy="MustBeAdult">
<h3>RemoveAdult</h3>
<button type="button" @onclick="HandleConfirmDeleteAsync">
    Delete Selected
</button>
@if (adults == null)
{
    <p>
        <em>No adults to display...</em>
    </p>
}
else
{
    <table class="table">
        <thead>
        <tr>
            <th>ID</th>
            <th>FirstName</th>
            <th>LastName</th>
            <th>HairColour</th>
            <th>EyeColour</th>
            <th>Age</th>
            <th>Weight</th>
            <th>Height</th>
            <th>Sex</th>
            <th>Job Title</th>
            <th>Salary</th>
        </tr>
        </thead>
        <tbody>
        @foreach (var adult in adults)
        {
            <tr @onclick="@(() => HandleDeleteList(adult))" style="cursor:pointer">
                <td>@adult.Persona.Id.ToString()</td>
                <td>@adult.Persona.FirstName</td>
                <td>@adult.Persona.LastName</td>
                <td>@adult.Persona.HairColor</td>
                <td>@adult.Persona.EyeColor</td>
                <td>@adult.Persona.Age.ToString()</td>
                <td>@adult.Persona.Weight.ToString()</td>
                <td>@adult.Persona.Height.ToString()</td>
                <td>@adult.Persona.Sex</td>
                <td>@adult.AdultJob.JobTitle</td>
                <td>@adult.AdultJob.Salary.ToString()</td>
            </tr>
        }
        </tbody>
    </table>

}
</AuthorizeView>
@code {
    private IList<Adult> adults;
    private IList<Adult> adultToDelete = new List<Adult>();
    private IAdultConnection adultConnection = new AdultConnectionImpl();
    protected override async Task OnInitializedAsync()
    {
        adults = await adultConnection.getAdultAsync();
    }

    private void HandleDeleteList(Adult adult)
    {
        var flag = true;
        for(var i = 0 ; i<adultToDelete.Count;i++)
        {
            if (adult.Equals(adultToDelete[i]) )
            {
                adultToDelete.Remove(adult);
                flag = false;
            }
        }
        if(flag)
        {
            adultToDelete.Add(adult);
            Console.WriteLine(adult);}
        else
        {
            adultToDelete.Remove(adult);
            Console.WriteLine(adult);
        }
    }

    private void HandleConfirmDeleteAsync()
    {
        if (adultToDelete.Count < 1 || adultToDelete == null) return;
        adultConnection.deleteAdultAsync(adultToDelete);
        adultToDelete.Clear();
        NavigationManager.NavigateTo("/");
    }

}